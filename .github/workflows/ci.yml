name: CI Pipeline

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r dev-requirements.txt
        pip install flake8 black isort

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics

    - name: Format check with black
      run: |
        black --check --diff .

    - name: Import sort check with isort
      run: |
        isort --check-only --diff .

    - name: Train Model
      run: |
        # Create necessary directories
        mkdir -p data/processed
        mkdir -p models
        
        # Run data processing
        python src/data/make_dataset.py data/raw/creditcard.csv
        
        # Train the model
        python src/models/train_model.py data/processed/

    - name: Test Model Loading
      run: |
        python -c "from joblib import load; model = load('src/models/model.joblib'); print('Model loaded successfully')"

    - name: Run FastAPI App Test
      run: |
        timeout 10s python app_gunicorn.py || true

    - name: Run Streamlit App Test
      run: |
        timeout 10s streamlit run app_streamlit.py --server.headless true --server.port 8501 || true

    - name: Run Tests
      run: |
        python -m unittest discover -s . -p "test_*.py" -v

    - name: Setup CML
      uses: iterative/setup-cml@v2

    - name: Create CML report
      env:
        REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
          echo "## CI report" > report.md
          echo "" >> report.md
          echo "- Python: $(python --version)" >> report.md
          echo "- Linting: passed ✅" >> report.md
          echo "- Model Training: passed ✅" >> report.md
          echo "- Tests: passed ✅" >> report.md
          # add metrics/artifacts here if you generate them
          cml comment create report.md
    